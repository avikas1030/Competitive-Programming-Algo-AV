# core idea - each object has only two possible states (taken or not taken), corresponding to binary 0 and 1. Thus, this type of problem is called "0-1 knapsack problem".

# code - 
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, W;
    if (!(cin >> n >> W)) return 0;
    vector<int> w(n+1);
    vector<ll> v(n+1);
    for (int i = 1; i <= n; ++i) cin >> w[i] >> v[i];

    vector<ll> f(W+1, 0);
    for (int i = 1; i <= n; ++i) {
        for (int j = W; j >= w[i]; --j) {
            f[j] = max(f[j], f[j - w[i]] + v[i]);
        }
    }
    cout << f[W] << "\n";
    return 0;
}

# problem link - https://atcoder.jp/contests/dp/tasks/dp_d
