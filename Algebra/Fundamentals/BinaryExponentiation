# Approach 1 - Recursive 
long long binpow(long long a, long long b) {
    if (b == 0)
        return 1;
    long long res = binpow(a, b / 2);
    if (b % 2)
        return res * res * a;
    else
        return res * res;
}

# Approach 2 - Iterative
long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}

# For moduler operation 
Problem 1 (MODEX) Link : http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=3671
Code :

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
long long binpow(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}

int main(){
    ll t;
    cin>>t;
    while(t--){
        ll x,y,n;
        cin>>x;
        cin>>y;
        cin>>n;
        ll ans = binpow(x, y, n);
        cout<<ans<<endl;
    }
    return 0;
}

# problem Applying a permutation kâ€Štimes
Problem: You are given a sequence of length n. Apply to it a given permutation k times.

Solution: Simply raise the permutation to kth power using binary exponentiation, and then apply it to the sequence. This will give you a time complexity of O(nlog k)

# code - 
vector<int> applyPermutation(vector<int> sequence, vector<int> permutation) {
    vector<int> newSequence(sequence.size());
    for(int i = 0; i < sequence.size(); i++) {
        newSequence[i] = sequence[permutation[i]];
    }
    return newSequence;
}

vector<int> permute(vector<int> sequence, vector<int> permutation, long long k) {
    while (k > 0) {
        if (k & 1) {
            sequence = applyPermutation(sequence, permutation);
        }
        permutation = applyPermutation(permutation, permutation);
        k >>= 1;
    }
    return sequence;
}
