# Sieving till root
# code - 
int n;
vector<bool> is_prime(n+1, true);
is_prime[0] = is_prime[1] = false;
for (int i = 2; i * i <= n; i++) {
    if (is_prime[i]) {
        for (int j = i * i; j <= n; j += i)
            is_prime[j] = false;
    }
}

# Prime numbers in range [L, R]
# code - 
#include <bits/stdc++.h>
using namespace std;

vector<char> segmentedSieveNoPreGen(long long L, long long R) {
    vector<char> isPrime(R - L + 1, true);
    long long lim = sqrt(R);
    for (long long i = 2; i <= lim; ++i)
        for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)
            isPrime[j - L] = false;
    if (L == 1)
        isPrime[0] = false;
    return isPrime;
}

int main() {
    long long L, R;
    cout << "Enter L and R: ";
    cin >> L >> R;

    vector<char> isPrime = segmentedSieveNoPreGen(L, R);

    cout << "Primes in range [" << L << ", " << R << "]: ";
    for (long long i = 0; i < (long long)isPrime.size(); ++i) {
        if (isPrime[i])
            cout << (L + i) << " ";
    }
    cout << "\n";

    return 0;
}
