# problem link - https://www.spoj.com/problems/ABCPATH/
# code - 
#include <bits/stdc++.h>
using namespace std;

int H, W;
vector<string> grid;
int dp[55][55]; // memoization
int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};

bool valid(int x, int y) {
    return x >= 0 && x < H && y >= 0 && y < W;
}

int dfs(int x, int y) {
    if (dp[x][y] != -1) return dp[x][y];
    int best = 1; // at least itself
    for (int k = 0; k < 8; k++) {
        int nx = x + dx[k], ny = y + dy[k];
        if (valid(nx, ny) && grid[nx][ny] == grid[x][y] + 1) {
            best = max(best, 1 + dfs(nx, ny));
        }
    }
    return dp[x][y] = best;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int caseNum = 1;
    while (cin >> H >> W, H && W) {
        grid.resize(H);
        for (int i = 0; i < H; i++) cin >> grid[i];

        memset(dp, -1, sizeof(dp));
        int ans = 0;

        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if (grid[i][j] == 'A') {
                    ans = max(ans, dfs(i, j));
                }
            }
        }

        cout << "Case " << caseNum++ << ": " << ans << "\n";
    }
    return 0;
}
